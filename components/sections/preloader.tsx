"use client"

import { useState, useEffect, useRef } from "react"
import { Canvas, useFrame } from "@react-three/fiber"
import { Points, PointMaterial } from "@react-three/drei"
import type * as THREE from "three"

// Sand particle system for preloader with reveal effect
function SandParticles({ isRevealing }: { isRevealing: boolean }) {
  const ref = useRef<THREE.Points>(null!)
  const [positions] = useState(() => {
    const positions = new Float32Array(2000 * 3) // Increased particle count for reveal effect
    for (let i = 0; i < 2000; i++) {
      positions[i * 3] = (Math.random() - 0.5) * 20
      positions[i * 3 + 1] = (Math.random() - 0.5) * 20
      positions[i * 3 + 2] = (Math.random() - 0.5) * 20
    }
    return positions
  })

  useFrame((state) => {
    if (ref.current) {
      if (isRevealing) {
        ref.current.rotation.x = state.clock.elapsedTime * 0.1
        ref.current.rotation.y = state.clock.elapsedTime * 0.15
        ref.current.position.y += 0.02 // Drift upward
        ref.current.position.x += Math.sin(state.clock.elapsedTime) * 0.01
      } else {
        ref.current.rotation.x = state.clock.elapsedTime * 0.05
        ref.current.rotation.y = state.clock.elapsedTime * 0.03
      }
    }
  })

  return (
    <Points ref={ref} positions={positions} stride={3} frustumCulled={false}>
      <PointMaterial
        transparent
        color="#d4af37"
        size={isRevealing ? 0.02 : 0.015}
        sizeAttenuation={true}
        depthWrite={false}
        opacity={isRevealing ? 0.3 : 0.7}
      />
    </Points>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
function HieroglyphCycler() {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0)

  // –ì–æ—Ç–æ–≤—ã–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –¥–ª—è –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
  const PRELOADER_SYMBOLS = [
    'ìå¢', 'ìÇÄ', 'ìá≥', 'ìáæ', 'ìàñ', 'ìàã', 'ìâê', 'ìÄÄ', 'ìÅê', 'ìÄî',
    'ìÉ≠', 'ìÖì', 'ìÜõ', 'ìÜè', 'ìÜ£', 'ìèè', 'ìä™', 'ìã¥', 'ìÇª', 'ìÇã'
  ]

  // –†–∞–Ω–¥–æ–º–Ω—ã–µ –µ–≥–∏–ø–µ—Ç—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã
  const EGYPTIAN_PHRASES = [
    '–î—Ä–µ–≤–Ω–∏–µ –ø–µ—Å–∫–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è...',
    '–ü—Ä–∏–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–Ω—É —Ñ–∞—Ä–∞–æ–Ω–æ–≤...',
    '–ü—Ä–æ–±—É–∂–¥–∞–µ–º –¥—É—Ö –ø–∏—Ä–∞–º–∏–¥...',
    '–†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –º—É–º–∏–π...',
    '–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –≥–ª—É–±–∏–Ω—ã –ù–∏–ª–∞...',
    '–†–∞–∑–≥–∞–¥—ã–≤–∞–µ–º –∑–∞–≥–∞–¥–∫–∏ —Å—Ñ–∏–Ω–∫—Å–∞...',
    '–í—Ö–æ–¥–∏–º –≤ —Å–≤—è—â–µ–Ω–Ω—ã–µ –≥—Ä–æ–±–Ω–∏—Ü—ã...',
    '–ß–∏—Ç–∞–µ–º –¥—Ä–µ–≤–Ω–∏–µ –ø–∞–ø–∏—Ä—É—Å—ã...',
    '–°–ª–µ–¥—É–µ–º –ø–æ —Å–ª–µ–¥–∞–º –∂—Ä–µ—Ü–æ–≤...',
    '–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–∞—Ç–∞ –≤–µ—á–Ω–æ—Å—Ç–∏...',
    '–ü—Ä–æ–±—É–∂–¥–∞–µ–º –¥—Ä–µ–≤–Ω—é—é –º–∞–≥–∏—é...',
    '–ò—â–µ–º —Å–æ–∫—Ä–æ–≤–∏—â–∞ –¢—É—Ç–∞–Ω—Ö–∞–º–æ–Ω–∞...',
    '–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã...',
    '–ü–æ–≥—Ä—É–∂–∞–µ–º—Å—è –≤ –º–∏—Ä –û—Å–∏—Ä–∏—Å–∞...',
    '–†–∞—Å–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–Ω—ã –ò–∑–∏–¥—ã...'
  ]

  useEffect(() => {
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–º–µ–Ω—ã –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤
    const hieroglyphInterval = setInterval(() => {
      setCurrentIndex(prev => (prev + 1) % PRELOADER_SYMBOLS.length)
    }, 200) // –ë—ã—Å—Ç—Ä–∞—è —Å–º–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 200–º—Å

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–º–µ–Ω—ã —Ñ—Ä–∞–∑ (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    const phraseInterval = setInterval(() => {
      setCurrentPhraseIndex(prev => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
        let newIndex
        do {
          newIndex = Math.floor(Math.random() * EGYPTIAN_PHRASES.length)
        } while (newIndex === prev && EGYPTIAN_PHRASES.length > 1)
        return newIndex
      })
    }, 2500) // –°–º–µ–Ω–∞ —Ñ—Ä–∞–∑ –∫–∞–∂–¥—ã–µ 2.5 —Å–µ–∫—É–Ω–¥—ã

    return () => {
      clearInterval(hieroglyphInterval)
      clearInterval(phraseInterval)
    }
  }, [])

  return (
    <div className="text-center text-amber-400/80 z-10 preloader-hieroglyphs">
      {/* –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω–æ–π */}
      <div
        className="font-['Hieroglyphic'] text-6xl mb-4 animate-pulse"
        style={{
          textShadow: '0 0 20px rgba(251, 191, 36, 0.8), 0 0 40px rgba(251, 191, 36, 0.4)',
          transition: 'all 0.2s ease-in-out'
        }}
      >
        {PRELOADER_SYMBOLS[currentIndex]}
      </div>

      {/* –§—Ä–∞–∑–∞ —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Å–º–µ–Ω–æ–π */}
      <p
        key={currentPhraseIndex} // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–µ–Ω—ã —Ñ—Ä–∞–∑
        className="text-sm font-mono transition-all duration-700"
        style={{
          textShadow: '0 0 10px rgba(251, 191, 36, 0.4)',
          animation: 'phraseFadeInOut 2.5s ease-in-out infinite'
        }}
      >
        {EGYPTIAN_PHRASES[currentPhraseIndex]}
      </p>
    </div>
  )
}

interface PreloaderProps {
  onComplete: () => void
}

export function Preloader({ onComplete }: PreloaderProps) {
  const [isRevealing, setIsRevealing] = useState(false)

  useEffect(() => {
    const revealTimer = setTimeout(() => {
      setIsRevealing(true)
    }, 1500)

    const completeTimer = setTimeout(() => {
      onComplete()
    }, 3500) // Extended time for reveal effect

    return () => {
      clearTimeout(revealTimer)
      clearTimeout(completeTimer)
    }
  }, [onComplete])

  return (
    <div
      className={`fixed inset-0 z-50 flex items-center justify-center marble-bg transition-opacity duration-1000 ${isRevealing ? "opacity-0" : "opacity-100"}`}
    >
      <div className="w-full h-full opacity-80">
        <Canvas camera={{ position: [0, 0, 8] }}>
          <ambientLight intensity={0.4} />
          <SandParticles isRevealing={isRevealing} />
        </Canvas>
      </div>
      <div
        className={`absolute inset-0 flex items-center justify-center transition-opacity duration-1000 ${isRevealing ? "opacity-0" : "opacity-100"}`}
      >
        <HieroglyphCycler />
      </div>
    </div>
  )
}
